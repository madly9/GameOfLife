# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

#Install necessary packages
#Install mpi4py after downloading from microsoft
#!pip install mpi4py
from mpi4py import MPI
import numpy
import sys
from matplotlib import pyplot as plt
from tqdm import tqdm
import matplotlib.animation as animation
#!pip install tqdm

fig = plt.figure()

##

#prob = float(sys.argv[1])
#COLS = int(sys.argv[2])
#ROWS = int(sys.argv[3])
#generations = int(sys.argv[4])

#Create initial grid
comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()
stat = MPI.Status()

prob = 0.7
COLS = 200
ROWS = 198
generations = 100

subROWS=ROWS//size+2

N=numpy.random.binomial(1,prob,size=(ROWS+2)*COLS)
M=numpy.reshape(N,(ROWS+2,COLS))

#Initial conditions
M[0,:] = 0
M[ROWS+1,:] = 0
M[:,0] = 0
M[:,COLS-1] = 0

initM = numpy.copy(M)

#print initM
print("First Generation")

plt.imshow(initM, interpolation='nearest')
plt.show()

# Function definitions 
#@profile
def msgUp(M):
	# Sends and Recvs rows with Rank+1
        comm.send(M[subROWS-2,:],dest=rank+1)
        M[subROWS-1,:]=comm.recv(source=rank+1)
        return 0

def msgDn(M):
	# Sends and Recvs rows with Rank-1
        comm.send(M[1,:],dest=rank-1)
        M[0,:] = comm.recv(source=rank-1)
        return 0

generation = 0
ims= []
def GOL(M):
    generation = 0
    ims= []
    for i in tqdm(range(generations)):
            generation = generation + 1
     #       print ("Generation = ",generation)
            intermediateM = numpy.copy(M)
            for ROWelem in range(1,ROWS+1):
                    for COLelem in range(1,COLS-1):
                            sum = ( M[ROWelem-1,COLelem-1]+M[ROWelem-1,COLelem]+M[ROWelem-1,COLelem+1]
                                +M[ROWelem,COLelem-1]+M[ROWelem,COLelem+1]
                                +M[ROWelem+1,COLelem-1]+M[ROWelem+1,COLelem]+M[ROWelem+1,COLelem+1] )
            #               print(ROWelem," ",COLelem," ",sum)
                            if M[ROWelem,COLelem] == 1:
                                    if sum < 2:
                                            intermediateM[ROWelem,COLelem] = 0
                                    elif sum > 3:
                                            intermediateM[ROWelem,COLelem] = 0
                                    else:
                                            intermediateM[ROWelem,COLelem] = 1
                            if M[ROWelem,COLelem] == 0:
                                    if sum == 3:
                                            intermediateM[ROWelem,COLelem] = 1
                                    else:
                                            intermediateM[ROWelem,COLelem] = 0
            M = numpy.copy(intermediateM)
            im=plt.imshow(M, animated=True,interpolation='None')
            ims.append([im])
            if numpy.sum(M) == 0:
                    print("Extinction Occurs at generation = ",generation)
                    plt.imshow(M, interpolation='nearest')
                    plt.show()
                    break
  
def compareGridPoints(oldGrid,newGrid):
	threshold = 1
	OG=numpy.asarray(oldGrid)
	NG=numpy.asarray(newGrid)
	if OG.size != NG.size :
		print('Grid sizes do not match')
		return 1
	for i in range(OG.size):
		if threshold < numpy.any(numpy.abs(numpy.subtract(OG,NG))):
			print('Change detected at iteration: %d'%(i))
			return newGrid 
		else:	
			print('No Change detected at iteration: %d'%(i))
			return oldGrid
    
#compute new grid and pass rows to neighbors
oldGrid=comm.gather(M[1:subROWS-1,:],root=0)
for i in range(1,100):
	if i%10 == 0:
		newGrid=comm.gather(M[1:subROWS-1,:],root=0)
		if 0 == rank:
			oldGrid=compareGridPoints(oldGrid,newGrid)
	GOL(M)
	#exhange edge rows for next interation	
	if rank == 0:
		msgUp(M)
	elif rank == size-1:
		msgDn(M)
	else:	
		msgUp(M)
		msgDn(M)
		
        newGrid=comm.gather(M[1:subROWS-1,:],root=0)
    if rank == 0:
        result= numpy.vstack(newGrid)
        plt.imshow(result, interpolation='nearest')

#	print numpy.vstack(initGrid)
#	print result[:]
#	print len(result)

#print(" ")
#print(" ")
#print("First Generation")
#print initM

#print(" ")
print("Present Generation = %d" %(generation))
ani = animation.ArtistAnimation(fig, ims, interval=25, blit=True,repeat_delay=500)
ani.save('animate_life.mp4')
#print M
plt.show()
#animate_life.mp4
vlc()
